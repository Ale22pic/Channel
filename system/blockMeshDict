/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.6                                   |
|   \\  /    A nd           | Web:      http://www.OpenFOAM.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale 1;

vertices        
(

/*
(0 		0 		0	)   // 0
(12.56637 	0		0	)   // 1
(0 		1 		0	)   // 2
(12.56637 	1 		0	)   // 3
(0 		2 		0	)   // 4
(12.56637 	2 		0	)   // 5
(0 		0 		4.18879	)   // 6 
(12.56637 	0 		4.18879	)   // 7
(0 		1 		4.18879 )   // 8
(12.56637 	1 		4.18879 )   // 9
(0 		2 		4.18879 )   // 10
(12.56637 	2 		4.18879	)   // 11
*/

(0 		-1 		0	)   // 0
(12.56637 	-1		0	)   // 1
(0 		0 		0	)   // 2
(12.56637 	0 		0	)   // 3
(0 		1 		0	)   // 4
(12.56637 	1 		0	)   // 5
(0 		-1 		4.18879	)   // 6 
(12.56637 	-1 		4.18879	)   // 7
(0 		0 		4.18879 )   // 8
(12.56637 	0 		4.18879 )   // 9
(0 		1 		4.18879 )   // 10
(12.56637 	1 		4.18879	)   // 11

);

blocks          
(
    hex (0 1 3 2 6 7  9  8) (384 64 192) simpleGrading (1 10 1)
    hex (2 3 5 4 8 9 11 10) (384 64 192) simpleGrading (1 0.1 1)
);

edges           
(
);

boundary         
(
    bottomWall 
    {
        type wall;
        faces
        (
            (0 1 7 6)
        );
    }

    topWall 
    {
        type wall;
        faces
        (
             (4 10 11 5)
        );
    }

    sides1 
    {
        type cyclic;
        neighbourPatch sides2;
        faces
        (
            (0 2 3 1)
            (2 4 5 3)
        );
    }

    sides2 
    {
        type cyclic;
        neighbourPatch sides1;
        faces
        (
            (6 7 9 8)
            (8 9 11 10)
        );
    }

    inout1 
    {
        type cyclic;
        neighbourPatch inout2;
        faces
        (
            (0 6 8 2)
            (2 8 10 4)
        );
    }

    inout2 
    {
        type cyclic;
        neighbourPatch inout1;
        faces
        (
            (1 3 9 7)
            (3 5 11 9)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
